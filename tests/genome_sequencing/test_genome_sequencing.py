import unittest
from genome_sequencing.genome_sequencing import (
    sequence_composition,
    sequence_reconstruction,
    overlap_list
)


class GenomeSequencingTest(unittest.TestCase):

    def setUp(self):
        super(GenomeSequencingTest, self).setUp()


    def tearDown(self):
        super(GenomeSequencingTest, self).tearDown()


    def test_sequence_composition(self):

        k = 5
        sequence = "CAATCCAAC"
        composition = sequence_composition(k, sequence)

        print(composition)
        self.assertListEqual(composition, [
            "AATCC",
            "ATCCA",
            "CAATC",
            "CCAAC",
            "TCCAA"
        ])

        # k = 100
        # with open('../input_data/genome_sequencing/sequence_composition.txt', 'r') as f:
        #     sequence = f.read()
        #
        # with open('../output_data/genome_sequencing/sequence_composition.txt', 'w') as f:
        #     f.write("\n".join(comp for comp in sequence_composition(k, sequence)))


    def test_sequence_reconstruction(self):

        kmers = [
            "ACCGA",
            "CCGAA",
            "CGAAG",
            "GAAGC",
            "AAGCT"
        ]

        reconstrcted_dna = sequence_reconstruction(kmers)

        self.assertEqual("ACCGAAGCT", reconstrcted_dna)



        with open('../input_data/genome_sequencing/sequence_reconstruction.txt', 'r') as data:
            while data.readline():
                kmers = [line.strip() for line in data.readlines()]


        print(kmers)
        reconstrcted_dna = sequence_reconstruction(kmers)
        expected_output = "AGCTCGACAAGACGCACCACCGATTATTTGGTAAAACCCCGCTTGGTCACCAGGAGTGTTGTGGTCAAACTTTAACTGAGCCGAACGTCTGGGACGGAGGGACCCTACGCTTGAAACACCCTGCGGGGAGAAATAATGTTTCGAGTCTAGAGGTTCACAACCATAAAGGTAATTGTCACCTGAGATCGTTAAGCCGACTTATTAACTAAAGGACTATCCCCACGAAAAGAGGACAGATCTACACTATTCCTACCGCTGATACGTTGGCTCTACGATCATATATTATATGGAGCCGTCCGACGTCACTTCAAACCGGTTTAAATCGAACAACGGTCCATTCCCCGACTAGGGCGGCCTATGGAGCGACGGATAGACTATCGCCGCGCGGGACTAACCCGCCGTGAGTCCCGGCTAAGAACTCCATCCTTCTGATGACACTCTACCATAGCTGAACCGTGACTATCAAACTAGTTGACTCGTGGCAGGATTCACGATTGACTTGACTTACCCCACCGAACGCAGTCCGGATAATGTCGCCTAGAGGTAACTTGTACGAGCCATCTTCCAGCGGCAGTCCGCAGATACTTTTGCATTGCCGCACCCGACGCGGAAATTTGTGGGAGGGCGGTGACCACTCGTACACGAGTCCATGCACCTCCGTTACCACAGGCCTAAATCGGACCCGCACAATCCCGGTGACTCGGATTTGCGTACAACCCGACCTCGAGCTGATTAATGGGCGGTTATATGGTACTCCCGTAGATAGTGGACCTCCAGCCCAGGTGGAGGGCTAACCCCCGTATGGCAGCACTAAACATCAGTCCGATCCGCATGAGCAGTAGATGGTGTAAATTTCTAGGAACGCCGTATGGTAACGCCTCGGCGTGAAGGGGGCATACAGATGAGATACATCGACTCACGTAGATTCATCCTACTTAGAATGAAGGCGGTTATGGTTATTTTGTGAAGATTAGTGCGAATGCACTGCCCTTGTAGGGCTGGCTGTCATTTCCGTGGCGTAGATTGTAGCACAGTTTTGGTTGCAATGATCACTTGCCCCGATCCTCACTACCGGCGACCAAAGGGATCAAAACGAGCTCGATGTCTGTGCTATGATTAGTCCTCAACATCGAGTAGGTTCACAAGGATTGCTCATAGACAGGGCCCATTGGTACTTTGATAAATTGTATCCAAGCGGGGGCCTAAGTTGTATTAACTGATTGCGATAAGTATTGAGCTCTGATCGGTGAAATGACTCGGAGCGCATCTGCTCTTGAGTACGACCGCTGAGATCATTAGGTTGACCTCGATTAAGGCGTATTGTCTAAAACACTGTCCGGGGGTGGCCTGCGAGAAAATTCACTATAAGGCGAATGCAGTCCACGAGTTGTAAAGGGAGGAAGCTCAAACTCCCCCCTAGGCTTGAAGCGTTCTCACGAGCACCGATGCCATCGTTAAACGTCAGTTATTACGGCACACCAACGGCATTTTCTCCCCCCTTTCGCCCTCGACCATTTAGTATATGGACATAATCATGATGAAGAATTTCAACTATCTTAGTGACGAGCTGTATGATTAGAAATCACAGTAGTGAAGTCACAACTACCCGCACACTTGGATGTTCAATGCCGTGTTGCACAACCCAACAGTGGTACATTCTCGCACTGCAAGGTGGGATATCAGGGCCTTAGTGCCCTTGGGTAGGCAACTGTGTGGTGACTACTGCATCCAAGCTAGGTGTTGCTAAACCGGATACGTACCTGGATGGGGACAAACTTGGCGTCTCCGAGCAGTGCTAAAGGGATACATTACCACATGCACACCTCTCAATTCGGTCAGGGGACTCGATGCCTCAATGGGTAGCGAGGATGGGTAGACACAAAAATGAAATCACCCACGTCGCCTTTAAGGGACAGTTATTGCGTGTCCTACTTTAATGCTAAGCGTTGGGTTTAGAGGTCATCTCACGATTTACGTCAAGTCGGCGTAGAACTGCCCCAAATTCCATACGTTATTCGAATGGATTGTCGTAACCGCGGCTCCGGGCGAATAGAGATATGAACAGTATGCTGCTTAAGGGCTTCGGCTCTCTGCGTTCACATGATACATTAATCAGTAAAAAGTTGGGTCATGACGAATATCCCGCTAGGTTAAGTTTGCCCATCCGCGGCGTCTCGGACAAATCCGCCAAAGACTCGTGCAGTCAGAAAAATCTTAACCCAAGTCCAAGATGGGGATCTCGCCCAAAATGGTGAGGCCGCGTGCGGACGCGACTTTCGGCCTATTTGCGGATATCATCAGGACCTGCGTATCTGTCGCGAGCAATAGAACTACTGTCCCTTCGGACTGGAAGAGCCCCGCGTGAACGCAGATCCATAGCAGGCGGTGGTTGAAACGTATGTATGTGCGCTCATCATTTCGTGGCTAGCGCCCAAATGCTCGAGCGCCGGTCAGGTGCAGGGTGACACGACACACGGCAATCCTGCAATTCAGTGGATAGCTACAACACTTGCGATCGAGGTTGGCCTGCCTCGAGCACTGAGACAGTGCCTACCGCCGTTAAGACTCACAGGGCAGAAATCTTGGTTTCAGTAATAGTAGTTCTCGGAACCATCGCGAGACAGTCGATGCAGACGACTTAACAGTGCATGTCGCGTGGGGAGCCGCTGAACTTTTTCAGTAACGATTGACTATAAAAGCCTACATCCATTCACGGAACCCACCCTAGGACCCTGAAGCCGCCCGTGTGCACCGGGGTGTTCTAAAGAATCCCTCCTTACCATTTCGGTTCGTCGGTAGAACCTCAGAGATGTACAAATGAACAACTAAAGCTAGTGCGGGACTCCCGGAGCCCAGAAGGCGTGCCCGTCAAAGTGACGATCAAGCTCAAGTCACGGATAAGCACGTCGTGTCACGAGTGAGCCTGGCAATCAGGGGGTCTACTAGTAACCCGTCTGACTAGCTATATAGGTCTATCGCCTGTTTCATCCGCATAACATACGAGGAAAACACTGCTAGCATGGTGCGCTGAAGGGTTTGGTGCCAACCTCCGCAAGGTCAATCTGCATCTTTCTGCACTGCATAACCCGCCTTATCTTAAGGGGGTTGCCTCAGAATCGTGCTATAAACATGTGCAATATTGATGGCTCCTTAGCGCCCATTGCCAAAAAATATTTAGGCGAAGATTGTGGTCATTGAGCGTCTAATAATAGCATGAATGCCAGTGGTACCATTCTGTCTAGACAATATGTTGTACGCTGCTGCCGACGACTGTTAATCCGTATCTTTTCGAGAACAACGCTTCTAAAGAGCTTGGCCTGCCTGTCCTGACCGACACATTAGCACTATAGTTGACTCGGATGCGCTCATACCTGTGCAGAGGTAAACCCCTTGGAGACAGGTCCTAAGCATTCCGTGCTAACCATAGCTAATATTTTAGCCCCTTGGCTGTAAAGAATAGGATTGGGGTGTCGGTAATAGGCTAATCTTGTATCCCGCGGTCCAGGTGCGGCCTGGGAGGCAGCACGTACATTAATCGAGCTATGGAGATAATTGTTAGTACCTGTGGAACTGTTTGAGTGCAATATGGCTCCCTTGCCGTGTGGGGGCTGAGATAAGTTCGTGAACAGAGAAGCTGATGTCGATAATAGATATTGTTACAAGAGACTTTAGTTTTATAACAAACTCAGATGACCGAGAAGTGTACCGTTGTTACACTCTATGGATCGGCATTAGGCTACGCGCACGTCCCCCCACGGCTTGCGCAGTACCCTCCGATCTCTATATACACTAGCTGTCGATGCGCGAATCTGTTGCCGTCATCTTCTTGCGTTATTTCCCGTGTCTAGGTACTCGGGGTGAAACATTACGGCTTAAATAGACGTATCCAATGAAAAGATTGCACTCGCGAAGTGACTCGACCAGCTATGTCGCCCTCCTATCTGACTCCACATCCGACGTTCGTTTAAGGCCTCGCGGTACAACTGTAGTCGTGACCGTGCACATCACTGATGAGGTTCATTCATAGAATTGTATGAAAGCACGAAACAATAATTTTCCTGTGGAGCTTTGGGTATTTGGACTCGAGGGCGCGAGGTCGTGTCCCTGGCAGTAACAAAACAAGTCTCCTGACAACATTCCCTAGAGGTACGAAATGTCCTACCGACCCCTCAATAGTTCGAGATTGAGTCTGACTAACTAGAACCCGCCATACTATATGGTCGTGCTAGATATATTAGCAGAGTTTCTTCCTGTCAGACTTCTATACTGTCGCACATACTTTCTTTGAAAACGTGCATATTGAGTGTCCAACACATGAACACAAGACGATTAGCGCCTACTTTCAAACCTTCCCTTCGGACCACGATTGAGTTGTGACTATAAGGTAGCCTGGATACACGCAATTAGGTACAGATACTCTACCACTGTTTTGTTTGTTGCTGGACCAAAAAGCGGCTCTCTGACCAATCTCATTAGTCTGGTTGTAGCTCAGATACACCTAAAAAAGCACCACGTGAGTTACAATTTGGTATATCCGTCCGTTCTAACAATCTGTTAACTCGCCGCTAATCTTTAAAACCTCCATACGGTGCATTGTCTCGTCAACTAATCTGCGCACATTAGACCAGTGATCTATCGCATCAATTATAAATCATTTCGGATAGAAGTATAGTGAAAGTTCACCAATAAGGTTGACCGCGTGTCGTCTGACGTAGAAGGTATCCAGGCGCCGAGGATACTAAGATAACACTTGAGAGTCATGTATCAGCGTGTTGAAGATTCGACGCGTTTGTCTTAGCTAGGCGGCTGCAGAGAGCACTACCACGCATACGAAGGTGTTTATTCGGAATTCTGCAACTAGAGTGCAGGTCATCAGCACGAATCGATCTTTTACGTTCAACATTCCGAAAGCGGAACGCCAACTGTCATAGTCCTGACTTAGTAGAGGCCTGAACAACTCCTCAATAAGGATAGACACGCAAGCGGAGATGCACGTCAG"
        self.assertEqual(expected_output, reconstrcted_dna)
        print(reconstrcted_dna)


    def test_overlap_list(self):

        kmers = [
            "ATGCG",
            "GCATG",
            "CATGC",
            "AGGCA",
            "GGCAT"
        ]

        overlaps = overlap_list(kmers)

        expected_results = [
            "AGGCA -> GGCAT",
            "CATGC -> ATGCG",
            "GCATG -> CATGC",
            "GGCAT -> GCATG"
        ]

        self.assertListEqual(overlaps, expected_results)





if __name__ == "__main__":
    unittest.main()
